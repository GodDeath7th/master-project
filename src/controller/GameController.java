package controller;

import javafx.fxml.FXML;
import javafx.scene.Group;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.layout.AnchorPane;
import javafx.scene.shape.Circle;
import model.AbstractGames;
import model.AppRunningManager;

public class GameController extends AbstractGames{
	@FXML
	private AnchorPane GamePane;
	@FXML
	private Button Game_pause_btn;
	@FXML
	private Button Game_exit_btn;
	@FXML
	private Button Game_skip_btn;
	@FXML
	private Label FinishedLabel;

	@FXML
	private Button Game_how_btn;
	@FXML
	private Label scoreLabel;
	@FXML
	private ImageView BasketBall;
	
	private int counter=0;
	private int score;
	private double x;
	private double y;
	
	
	public void initialize()
	{
		//Game_Target.setVisible(false);
		
		// set score = 0 at beginning
		score=0;
		FinishedLabel.setVisible(false);
		
		// set style of dot 
		BasketBall.setImage(new Image("/image/basketball.png"));
		// for plan, get game content for game list
		if(AppRunningManager.isPlan) {
			setType(AppRunningManager.getCurrentGameList().get(AppRunningManager.getCurrentGameIndex()).getType());
			setDifficulty(AppRunningManager.getCurrentGameList().get(AppRunningManager.getCurrentGameIndex()).getDifficulty());
			setRepetition(AppRunningManager.getCurrentGameList().get(AppRunningManager.getCurrentGameIndex()).getRepetition());
		}
		// for single game, get game content for game class
		else {
			setType(AppRunningManager.getCurrentGame().getType());
			setDifficulty(AppRunningManager.getCurrentGame().getDifficulty());
			setRepetition(AppRunningManager.getCurrentGame().getRepetition());
			
		}
		// initial all event handler
		initializeEventHandler();
		
		// start to generate targer in screen at random place
		randomCreateTargets();
		
		// if has next game in plan, set skip button usable, if no, disable it
		if(AppRunningManager.isPlan){
		if((AppRunningManager.getCurrentGameIndex()+1)== AppRunningManager.getCurrentGameList().size())
			Game_skip_btn.setVisible(false);
		}
		
		if (!AppRunningManager.isPlan) {
			Game_skip_btn.setVisible(false);
		}
		
	}
	
	public void initializeEventHandler()
	{
		EventHandler<MouseEvent> eventHandler=new EventHandler<MouseEvent>() {

			@Override
			public void handle(MouseEvent arg0) {
				// TODO Auto-generated method stub
				counter++;
				if ((arg0.getX()>=(x-100.0))&&(arg0.getX()<=(x+100.0))&&(arg0.getY()>=(y-100.0))&&(arg0.getY()<=(y+100.0))) {
					score++;
					
					
				}
				scoreLabel.setText(score+"");
				System.out.println(score);
				randomCreateTargets();
				if (counter>=Integer.parseInt(getRepetition())) {
					GamePane.removeEventHandler(MouseEvent.MOUSE_CLICKED, this);
					finish(score);
					FinishedLabel.setVisible(true);
				}
			}
		};
		GamePane.addEventHandler(MouseEvent.MOUSE_CLICKED, eventHandler);
	}
	
	// specific function used for generate random target
	private void randomCreateTargets() {
		// TODO Auto-generated method stub
		x=Math.random()*800;
		BasketBall.setLayoutX(x);
		y=Math.random()*450;
		BasketBall.setLayoutY(y);
		
		Group group=new Group();
		group.getChildren().add(BasketBall);
	
		GamePane.getChildren().addAll(group);
		
	}

	// Event Listener on Button[#Game_pause_btn].onAction
	@FXML
	
	// bind function with button
	public void ActionOnGame_pause_btn(ActionEvent event) throws Exception {
		// TODO Autogenerated
		pause();
	}
	// Event Listener on Button[#Game_exit_btn].onAction
	@FXML
	public void ActionOnGame_exit_btn(ActionEvent event) {
		// TODO Autogenerated
		try {
			exitGame();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	// Event Listener on Button[#Game_skip_btn].onAction
	@FXML
	public void ActionOnGame_skip_btn(ActionEvent event) throws Exception {
		// TODO Autogenerated
		skip();
	}
	@FXML
	public void ActionOnGame_how_btn(ActionEvent event) throws Exception{
		tutorial();
	}
	
	
	// go to tutotial scene
	public void tutorial() throws Exception {
		AppRunningManager.loadScene("/view/GameTutorial", 1280, 720);
	}
	
	
}
